{"version":3,"sources":["webpack:///./src/pages/contact.js","webpack:///./src/components/card.js","webpack:///./src/pages/contact.module.css","webpack:///./src/components/seo.js"],"names":["Grid","children","className","styles","grid","ContactPage","data","title","style","padding","allContactsJson","nodes","map","contact","fontWeight","fontSize","name","role","marginTop","marginBottom","href","email","Card","border","module","exports","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"6FAAA,iHAYMA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,yBAAKC,UAAWC,IAAOC,MAAOH,IA0D9CI,UArDK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,YACX,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,yBACEC,MAAO,CACLC,QAAS,YAGX,0CACA,kBAACT,EAAD,KACGM,EAAKI,gBAAgBC,MAAMC,KAAI,SAAAC,GAAO,OACrC,kBAAC,IAAD,CACAX,UAAWC,IAAOU,SAChB,6BACA,yBAEEL,MAAO,CACLM,WAAY,MACZC,SAAU,UAGXF,EAAQG,MAEX,yBACER,MAAO,CACLO,SAAU,UAGXF,EAAQI,OAIX,uBAAGT,MAAO,CAAEU,UAAW,OAAQC,aAAc,IAC7C,uBAAGC,KAAI,UAAYP,EAAQQ,OAAUR,EAAQQ,kB,kCCpD3D,yBAqBeC,IAlBF,SAAC,GAAD,IAAGrB,EAAH,EAAGA,SAAUO,EAAb,EAAaA,MAAON,EAApB,EAAoBA,UAApB,OACX,yBACEA,UAAWA,EACXM,MAAK,eACHe,OAAQ,oBACRd,QAAS,UACND,IAGJP,K,qBCXLuB,EAAOC,QAAU,CAAC,KAAO,8BAA8B,QAAU,mC,kCCDjE,0DAYA,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMtB,EAAS,EAATA,MAC9BuB,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFrB,MAAOA,EACP4B,cAAa,QAAUL,EAAKG,aAAa1B,MACzCsB,KAAM,CACJ,CACEb,KAAK,cACLoB,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS7B,GAEX,CACE8B,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEpB,KAAK,eACLoB,QAAQ,WAEV,CACEpB,KAAK,kBACLoB,QAASN,EAAKG,aAAaK,QAE7B,CACEtB,KAAK,gBACLoB,QAAS7B,GAEX,CACES,KAAK,sBACLoB,QAASJ,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-contact-js-1675a90d862f116ade3e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Container from '../components/container';\nimport Navbar from '../components/navbar';\nimport SEO from '../components/seo';\nimport Card from '../components/card';\n\nimport styles from './contact.module.css';\n\nconst Grid = ({ children }) => <div className={styles.grid}>{children}</div>;\nGrid.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst ContactPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Contact\" />\n    <Container>\n      <Navbar />\n      <div\n        style={{\n          padding: '10rem 0',\n        }}\n      >\n        <h1>Contact Us</h1>\n        <Grid>\n          {data.allContactsJson.nodes.map(contact => (\n            <Card\n            className={styles.contact}>\n              <div>\n              <div\n                \n                style={{\n                  fontWeight: '600',\n                  fontSize: '1.1em',\n                }}\n              >\n                {contact.name}\n              </div>\n              <div\n                style={{\n                  fontSize: '0.9em',\n                }}\n              >\n                {contact.role}\n              </div>\n              </div>\n              \n              <p style={{ marginTop: '1rem', marginBottom: 0 }}>\n              <a href={`MAILTO:${contact.email}`}>{contact.email}</a>\n              </p>\n              \n            </Card>\n          ))}\n        </Grid>\n      </div>\n    </Container>\n  </Layout>\n);\nContactPage.propTypes = {\n  data: PropTypes.shape({\n    allContactsJson: PropTypes.shape({\n      nodes: PropTypes.array,\n    }),\n  }).isRequired,\n};\n\nexport default ContactPage;\n\nexport const query = graphql`\n  query ContactsQuery {\n    allContactsJson {\n      nodes {\n        name\n        role\n        number\n        email\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ children, style, className }) => (\n  <div\n    className={className}\n    style={{\n      border: '1px solid #eaeaef',\n      padding: '2.5rem',\n      ...style,\n    }}\n  >\n    {children}\n  </div>\n);\nCard.propTypes = {\n  children: PropTypes.node.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"contact-module--grid--2rfuX\",\"contact\":\"contact-module--contact--3yNwE\"};","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}