{"version":3,"sources":["webpack:///./src/components/card.js","webpack:///./src/pages/members.js","webpack:///./src/pages/members.module.css","webpack:///./src/components/seo.js"],"names":["Card","children","style","className","border","padding","Grid","styles","grid","MembersPage","data","title","allMembersJson","nodes","map","cls","key","year","marginTop","members","member","name","card","fontWeight","fontSize","role","module","exports","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"4FAAA,yBAqBeA,IAlBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,UAApB,OACX,yBACEA,UAAWA,EACXD,MAAK,eACHE,OAAQ,oBACRC,QAAS,UACNH,IAGJD,K,kCCZL,6HAaMK,EAAO,SAAC,GAAD,IAAGL,EAAH,EAAGA,SAAH,OAAkB,yBAAKE,UAAWI,IAAOC,MAAOP,IAyE9CQ,UApEK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,YACX,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,yBACET,MAAO,CACLG,QAAS,YAGX,uCACA,qKAICK,EAAKE,eAAeC,MAAMC,KAAI,SAAAC,GAAG,OAChC,yBAAKC,IAAKD,EAAIE,MACZ,wBAAIf,MAAO,CAAEgB,UAAW,SAAxB,IAAuCH,EAAIE,MAC3C,kBAACX,EAAD,KACGS,EAAII,QAAQL,KAAI,SAAAM,GACf,OACE,kBAAC,IAAD,CAAMJ,IAAKI,EAAOC,KAAMlB,UAAWI,IAAOe,MAcxC,yBACEpB,MAAO,CACLqB,WAAY,MACZC,SAAU,UAGXJ,EAAOC,MAEV,yBACEnB,MAAO,CACLsB,SAAU,UAGXJ,EAAOK,oB,qBCjE9BC,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,gC,kCCD9D,0DAYA,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpB,EAAS,EAATA,MAC9BqB,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,kBAAC,IAAD,CACEO,eAAgB,CACdN,QAEFnB,MAAOA,EACP0B,cAAa,QAAUL,EAAKG,aAAaxB,MACzCoB,KAAM,CACJ,CACEV,KAAK,cACLiB,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS3B,GAEX,CACE4B,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEjB,KAAK,eACLiB,QAAQ,WAEV,CACEjB,KAAK,kBACLiB,QAASN,EAAKG,aAAaK,QAE7B,CACEnB,KAAK,gBACLiB,QAAS3B,GAEX,CACEU,KAAK,sBACLiB,QAASJ,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-members-js-d44ae77375c0af7ff4a1.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ children, style, className }) => (\n  <div\n    className={className}\n    style={{\n      border: '1px solid #eaeaef',\n      padding: '2.5rem',\n      ...style,\n    }}\n  >\n    {children}\n  </div>\n);\nCard.propTypes = {\n  children: PropTypes.node.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  style: PropTypes.object,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\n\nimport Card from '../components/card';\nimport Container from '../components/container';\nimport Layout from '../components/layout';\nimport Navbar from '../components/navbar';\nimport SEO from '../components/seo';\n\nimport styles from './members.module.css';\n\nconst Grid = ({ children }) => <div className={styles.grid}>{children}</div>;\nGrid.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst MembersPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Members\" />\n    <Container>\n      <Navbar />\n      <div\n        style={{\n          padding: '10rem 0',\n        }}\n      >\n        <h1>Members</h1>\n        <p>\n          Exunâ€™s members form an elite team of technology enthusiasts, with\n          skills ranging from design and programming to quizzing and hardware.\n        </p>\n        {data.allMembersJson.nodes.map(cls => (\n          <div key={cls.year}>\n            <h2 style={{ marginTop: '5rem' }}>{` ${cls.year}`}</h2>\n            <Grid>\n              {cls.members.map(member => {\n                return (\n                  <Card key={member.name} className={styles.card}>\n                    {/*{member.image && (\n                      <Img\n                        fixed={member.image.childImageSharp.fixed}\n                        style={{\n                          // height: 80,\n                          // width: 80,\n                          borderRadius: '50%',\n                          overflow: 'hidden',\n                          marginBottom: '1rem',\n                        }}\n                      />\n                    )}*/}\n\n                    <div\n                      style={{\n                        fontWeight: '600',\n                        fontSize: '1.1em',\n                      }}\n                    >\n                      {member.name}\n                    </div>\n                    <div\n                      style={{\n                        fontSize: '0.9em',\n                      }}\n                    >\n                      {member.role}\n                    </div>\n                  </Card>\n                );\n              })}\n            </Grid>\n          </div>\n        ))}\n      </div>\n    </Container>\n  </Layout>\n);\nMembersPage.propTypes = {\n  data: PropTypes.shape({\n    allMembersJson: PropTypes.shape({\n      nodes: PropTypes.array,\n    }),\n  }).isRequired,\n};\n\nexport default MembersPage;\n\nexport const query = graphql`\n  query MembersQuery {\n    allMembersJson {\n      nodes {\n        year\n        members {\n          name\n          role\n        }\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"members-module--grid--vkUKM\",\"card\":\"members-module--card--1qGF3\"};","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}